<?xml version="1.0" encoding="UTF-8" ?>
<xpjp version="1.0">
	<perl>
sub artifact_name
{
	my $config_name = shift;
	my $config_type = shift;
	my $platform = lc($xpj->{platform});
	my $target_name = $xpj->{target_name}; #name of the currently processing target
	my $base_name = $target_name;
	if ( $config_name ne "Release" ) { $base_name = "$target_name$config_name"; }
	if ( ($platform =~ /win/) ) {
		if ( $config_type eq 'static-library' ) {
			return "$base_name.lib";
		}
		elsif( $config_type eq 'dynamic-library' ) {
			return "$base_name.dll";
		}
		else {
			return "$base_name.exe";
		}
	}
	else {
	    if ( $config_type eq 'static-library' ) {
		    return "lib$base_name.a";
		}
		elsif( $config_type eq 'dynamic-library' ) {
		    return "lib$base_name.so";
		}
	}
	return $base_name;
}

sub llvm_lib_name
{
   my $stem = shift;
   return "$tempvar->{lib_prefix}".$stem."$tempvar->{lib_suffix}";
}
	</perl>
	<template name="base_config_t">
		<!-- config name is anything you want.  Config type is static-library, dynamic-library, executable, console-executable -->
		<configuration name="{{[$tempvar->{config_name}]}}">
		  <configuration-type>{{[$tempvar->{config_type}]}}</configuration-type>
		  <artifact-name>{{[artifact_name($tempvar->{config_name}, $tempvar->{config_type})]}}</artifact-name>
		</configuration>
	</template>
	
	<!-- Call a given template twice forwarding all arguments to that template but also adding
		$tempvar->{'config_name'} to be either release or debug -->
	<template name="debug_release_t">
		<apply-template name="{{[$tempvar->{template}]}}">
			<define key="config_name" value="Debug"/>
			<!-- forward any key/value pairs to the template -->
			<forward-defines/>
		</apply-template>
		<apply-template name="{{[$tempvar->{template}]}}">
			<define key="config_name" value="Release"/>
			<!-- forward any key/value pairs to the template -->
			<forward-defines/>
		</apply-template>
	</template>

	<!--We rely on the default configs being appropriate for debug in general-->
	<template name="default_debug_release_config_t">
	  <configuration name="Release">
		<optimization>max-speed</optimization>
		<intrinsic-functions>true</intrinsic-functions>
		<buffer-security-check>false</buffer-security-check>
		<if cond="lc($xpj->{platform}) =~ /win/">
		  <use-debug-libraries>false</use-debug-libraries>
		  <function-level-linking>true</function-level-linking>
		  <enable-comdat-folding>true</enable-comdat-folding>
		  <optimize-references>true</optimize-references>
		  <runtime-library>multi-threaded-DLL</runtime-library>
		  <enable-enhanced-instruction-set>streaming-SIMD-extensions-2</enable-enhanced-instruction-set>
		</if>
	  </configuration>
	  <if cond="lc($xpj->{platform}) =~ /win/">
		<else/>
		<cflags>-D__STDC_LIMIT_MACROS=1 -D__STDC_CONSTANT_MACROS=1 -DGTEST_HAS_TR1_TUPLE=0</cflags>
		<cppflags>-std=c++11</cppflags>
		<lflags>-lstdc++</lflags>
	  </if>
	</template>
	
	<template name="static_lib_t">
		<apply-template name="debug_release_t">
			<forward-defines/>
			<define key="template" value="base_config_t"/>
			<define key="config_type" value="static-library"/>
		</apply-template>
		<apply-template name="default_debug_release_config_t"/>
	</template>
	
	<template name="console_t">
		<apply-template name="debug_release_t">
			<forward-defines/>
			<define key="template" value="base_config_t"/>
			<define key="config_type" value="console-executable"/>
		</apply-template>
		<apply-template name="default_debug_release_config_t"/>
	</template>
	
	<template name="gtest_headers">
		<search type="header">
			../../gtest
			../../gtest/include
		</search>

		<if cond="(lc($xpj->{platform}) =~ /win/)">
		  <preprocessor>
			_VARIADIC_MAX=10
		  </preprocessor>
		</if>
	</template>
	
	<template name="cclj_headers">
		<search type="header">
			../../cclj/include
		</search>
	</template>
	<template name="llvm_libs">
	   <libraries>
		 {{[llvm_lib_name("LLVMJIT")]}}
		 {{[llvm_lib_name("LLVMInterpreter")]}}
		 {{[llvm_lib_name("LLVMX86CodeGen")]}}
		 {{[llvm_lib_name("LLVMX86AsmParser")]}}
		 {{[llvm_lib_name("LLVMX86Disassembler")]}}
		 {{[llvm_lib_name("LLVMRuntimeDyld")]}}
		 {{[llvm_lib_name("LLVMExecutionEngine")]}}
		 {{[llvm_lib_name("LLVMAsmPrinter")]}}
		 {{[llvm_lib_name("LLVMSelectionDAG")]}}
		 {{[llvm_lib_name("LLVMX86Desc")]}}
		 {{[llvm_lib_name("LLVMMCParser")]}}
		 {{[llvm_lib_name("LLVMCodeGen")]}}
		 {{[llvm_lib_name("LLVMX86AsmPrinter")]}}
		 {{[llvm_lib_name("LLVMX86Info")]}}
		 {{[llvm_lib_name("LLVMObjCARCOpts")]}}
		 {{[llvm_lib_name("LLVMScalarOpts")]}}
		 {{[llvm_lib_name("LLVMX86Utils")]}}
		 {{[llvm_lib_name("LLVMInstCombine")]}}
		 {{[llvm_lib_name("LLVMTransformUtils")]}}
		 {{[llvm_lib_name("LLVMipa")]}}
		 {{[llvm_lib_name("LLVMAnalysis")]}}
		 {{[llvm_lib_name("LLVMTarget")]}}
		 {{[llvm_lib_name("LLVMCore")]}}
		 {{[llvm_lib_name("LLVMMC")]}}
		 {{[llvm_lib_name("LLVMObject")]}}
		 {{[llvm_lib_name("LLVMSupport")]}}
	   </libraries>
	</template>
	
	<template name="cclj_link">
	   <configuration name="Release">
		 <search type="linker">
		   ../../../llvmbuild/lib/Release
		 </search>
	   </configuration>
	   <configuration name="Debug">
		 <search type="linker">
		   ../../../llvmbuild/lib/Debug
		 </search>
	   </configuration>
	 <if cond="(lc($xpj->{platform}) =~ /win/)">
	   <apply-template name="llvm_libs">
		 <define key="lib_prefix" value=""/>
		 <define key="lib_suffix" value=".lib"/>
	   </apply-template>
	   <else/>
	   <apply-template name="llvm_libs">
		 <define key="lib_prefix" value=""/>
		 <define key="lib_suffix" value=""/>
	   </apply-template>
	 </if>
	</template>
	
	<project name="cclj">
		<projdir>../{{["$xpj->{platform}"]}}</projdir>

		<!-- everything else is relative to the project dir -->
		<libdir>../lib/{{[$xpj->{platform}]}}</libdir>
		<bindir>../bin/{{[$xpj->{platform}]}}</bindir>
		<builddir>../{{["$xpj->{platform}"]}}/build</builddir>
		<target name="pcre">
			<apply-template name="static_lib_t"/>
			<search type="header">
				../../pcre
			</search>
			<preprocessor>
				HAVE_CONFIG_H
				PCRE_STATIC
			</preprocessor>
			<files name="src" root="../../pcre">
				*.h
				pcre_byte_order.c
				pcre_chartables.c
				pcre_compile.c
				pcre_config.c
				pcre_dfa_exec.c
				pcre_exec.c
				pcre_fullinfo.c
				pcre_get.c
				pcre_globals.c
				pcre_jit_compile.c
				pcre_maketables.c
				pcre_newline.c
				pcre_ord2utf8.c
				pcre_refcount.c
				pcre_string_utils.c
				pcre_study.c
				pcre_tables.c
				pcre_ucd.c
				pcre_valid_utf8.c
				pcre_version.c
				pcre_xclass.c
			</files>
		</target>
		<target name="gtest">
			<apply-template name="static_lib_t"/>
			<apply-template name="gtest_headers"/>
			<files name="include" root="../../gtest/include/gtest">
			  *
			  internal/*
			</files>
			<files name="src" root="../../gtest/src">
				*
				-gtest_main.cc
				-gtest-all.cc
			</files>
		</target>
		<target name="cclj">
			<apply-template name="static_lib_t"/>
			<apply-template name="cclj_headers"/>
			<search type="header">
				../../../llvm-3.4.src/include/
				../../../llvmbuild/include/
				../../pcre
			</search>
			<preprocessor>
				_SCL_SECURE_NO_WARNINGS
				PCRE_STATIC
			</preprocessor>
			<files name="include" root="../../cclj/include/cclj/">
				*
				plugins/*
			</files>
			<files name="src" root="../../cclj/src/cclj/">
				*
			</files>
			<precompiled-header root="../../cclj/src/cclj" header="precompile.h" source="precompile.cpp"/>
		</target> 
		<target name="cclj_tests">
			<apply-template name="console_t"/>
			<apply-template name="gtest_headers"/>
			<apply-template name="cclj_headers"/>
			<apply-template name="cclj_link"/>
			<search type="header">
				../../pcre
			</search>
			<preprocessor>
				PCRE_STATIC
			</preprocessor>
			<depends>
				gtest
				cclj
				pcre
			</depends>
			<if cond="!(lc($xpj->{platform}) =~ /win/)">
			  <libraries>
				pthread
				dl
				m
			  </libraries>
			</if>
			<files name="cclj_test" root="../../cclj/src/test/">
				*
			</files>
			<precompiled-header root="../../cclj/src/test" header="precompile.h" source="precompile.cpp"/>
		</target>
	</project>
</xpjp>