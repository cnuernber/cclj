<?xml version="1.0" encoding="UTF-8" ?>
<xpjp version="1.0">
	<perl>
sub artifact_name
{
	my $config_name = shift;
	my $platform = lc($xpj->['platform']);
	my $config_type = shift;
	my $target_name = $xpj->{'target_name'}; #name of the currently processing target
	my $base_name = $target_name;
	if ( $config_name ne "Release" ) { $base_name = "$target_name$config_name"; }
	if ( ($platform eq 'win32') || ($platform eq 'win64')) {
		if ( $config_type eq 'StaticLibrary' ) {
			return "$base_name.lib";
		}
		elsif( config_type eq 'DynamicLibrary' ) {
			return "$base_name.dll";
		}
		else {
			return "$base_name.exe";
		}
	}
	return $base_name;
}
	</perl>
	<template name="base_config_t">
		<!-- config name is anything you want.  Config type is StaticLibrary, DynamicLibrary, Executable, ConsoleExecutable -->
		<configuration name="{{[$template->{'config_name'}}]" type="{{[$template->{'config_type'}]}}">
			<set_artifact_name>{{[artifact_base($template->['config_name']), $template->['config_type'])}}]</set_artifact_name>
		</configuration>
	</template>
	
	<!-- Call a given template twice forwarding all arguments to that template but also adding
		$template->{'config_name'} to be either release or debug -->
	<template name="debug_release_t">
		<apply-template name="{{[$template->{'template'}]}}]">
			<define key="config_name" value="Debug"/>
			<!-- forward any key/value pairs to the template -->
			<forward-defines/>
		</apply-template>
		<apply-template name="{{[$template->{'template'}]}}">
			<define key="config_name" value="Release"/>
			<!-- forward any key/value pairs to the template -->
			<forward-defines/>
		</apply-template>
	</template>
	
	<template name="static_lib_t">
		<apply-template name="debug_release_t">
			<forward_defines/>
			<define key="template" value="base_config_t"/>
			<define key="config_type" value="static_library"/>
		</apply-template>
	</template>
	
	<project name="cclj">
		<projdir>../{{["$xpj->{'tool'}" . "$xpj->{'platform'}"]}}</projdir>
		<libdir>../../lib/{{[$xpj->{'platform'}]}}</libdir>
		<bindir>../../bin/{{[$xpj->{'platform'}]}}</bindir>
		<intdir>../{{["$xpj->{'tool'}" . "$xpj->{'platform'}"]}}/build"</intdir>
		<target name="gtest">
			<apply-template name="static_lib_t"/>
			<preprocessor type="define">
				_VARIADIC_MAX=10
			</preprocessor>
			<search type="include">
				../../gtest
				../../gtest/include
			</search>
			<files name="src" root="../../gtest/src">
				*.cc
				-gtest_main.cc
				-gtest-all.cc
			</files>
		</target>
	</project>
</xpjp>