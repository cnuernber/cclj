; scope special forms are a basic item that append a set of ast nodes to be 
; executed at scope exit.
; these are meant to be another building block for eventually getting to
; objects.
; scope exit blocks return void
(defn sum|f32 [ data|ptr[f32] len|u32 ]
  (let [retval 0|f32]
    (for [idx 0|u32]
		 (< idx len)
		 [(set idx (+ idx 1|u32))]
	  (set retval (+ retval (get data idx))))
	retval))


(defn inc-array|ptr[f32] [ len|u32 ]
  (let [new-data (ptr-cast|f32(malloc rt (* len 4|u32) 4|u8 ))]
    (for [idx 0|u32]
	 (< idx len)
	 [(set idx (+ idx 1|u32))]
      (set new-data idx (numeric-cast|f32 idx)))
     new-data))


(defn sum-array|f32 [dbl|u32 len|u32]
  (let [; no matter what this scope-exit call will happen just before
        ; this let block exits
	; scope takes two statements.  It calls the first returning its value
	; and adds its second to the list of things to do when the scope exits.
        new-data (scope (inc-array len) (free rt (ptr-cast|unqual scope-value)))
	; bad style, but for this test I am rebinding new-data.
	; without the scope exit block, there would be no way to
	; free it because its definition is now hidden.
        new-data (sum new-data len)]
    (if (> dbl 0|u32)
      (* 2|f32 new-data)
      new-data)))


;should be 3*45, 135.  The allocator will tell me if something fails.
(+ (sum-array 1|u32 10|u32) (sum-array 0|u32 10|u32))
        