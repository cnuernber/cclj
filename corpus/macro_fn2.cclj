
;macro functions are normal lisp functions that run at compile time.
;thus their arguments are evaluated at call time just like the normal
;functions.  Numbers are stripped of their types during lisp computation
;so all lisp computations at compile time produce doubles (for now).
(def-macro-fn recurse-add-macro [a]
  (if (> a 0 )
    (+ a (recurse-add-macro (- a 1)))
    0))

;macro takes its argument un-evaluated.  Evaluating its argument
;only works if the argument is a list that can be interpreted at compile time.
;getting the type of something only works if that something is not the result of
;a form because forms produce types.  The type checker can't work both down and up
;in general, and macros and polymorphic functions are run during the type check process
;so their arguments are not type checked (thus have no values in complex cases)
;It has to be this way because the arguments for macros may not make sense until
;the macro has computed its result.

(defmacro compile-time-recurse-add[a b]
  (let [added (recurse-add-macro a)
       type-var (type b)]
    (quote (numeric-cast|(unquote type-var) (unquote added)))))

;macro should produce
;(numeric-cast|f32 45|f64)

(compile-time-recurse-add (+ 5 4) |f32)